#!/usr/bin/perl
# Authored by: Manishankar Bhaskaran   (mbhaska1)
#              Baladithya  Balamurugan (bbalamur)
# $Id: pmake,v 1.40 2021-05-24 22:02:38-07 - - $

$0 =~ s|.*/||;
use Getopt::Std;
use Data::Dumper;
use strict;
use warnings;

$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Terse = 1;
sub dump_hash ($\%) {
   my ($label, $hashptr) = @_;
   print STDERR "%$label: ", Data::Dumper->Dump ([$hashptr]);
}

my $STATUS = 0;
END { exit $STATUS; }
$SIG{'__WARN__'} = sub { print STDERR @_; $STATUS = 1; };
$SIG{'__DIE__'} = sub { print STDERR @_; $STATUS = 1; exit; };

# sigtoperl: x86_64 Linux unix1.lt.ucsc.edu
# sigtoperl: Sun Nov 22 17:33:55 2020
my %strsignal = (
    0 => "Unknown signal 0",
    1 => "Hangup",
    2 => "Interrupt",
    3 => "Quit",
    4 => "Illegal instruction",
    5 => "Trace/breakpoint trap",
    6 => "Aborted",
    7 => "Bus error",
    8 => "Floating point exception",
    9 => "Killed",
   10 => "User defined signal 1",
   11 => "Segmentation fault",
   12 => "User defined signal 2",
   13 => "Broken pipe",
   14 => "Alarm clock",
   15 => "Terminated",
   16 => "Stack fault",
   17 => "Child exited",
   18 => "Continued",
   19 => "Stopped (signal)",
   20 => "Stopped",
   21 => "Stopped (tty input)",
   22 => "Stopped (tty output)",
   23 => "Urgent I/O condition",
   24 => "CPU time limit exceeded",
   25 => "File size limit exceeded",
   26 => "Virtual timer expired",
   27 => "Profiling timer expired",
   28 => "Window changed",
   29 => "I/O possible",
   30 => "Power failure",
   31 => "Bad system call",
);

sub run_command ($) {
   my ($command) = @_;
   my $status = eval {no warnings; system $command};
   return undef unless $status;
   return "$!" if $status == -1;
   my $signal = $status & 0x7F;
   my $core = $status & 0x80;
   my $exit = ($status >> 8) & 0xFF;
   return "Error $exit" unless $signal || $core;
   return ($strsignal{$signal} || "Invalid Signal Number $signal")
        . ($core ? " (core dumped)" : "");
}


my $MAKECMDGOALS;
my $Makefile = "Makefile";
my %OPTIONS;
my %GRAPH;
my %MACROS;

sub usage() { die "Usage: $0 [-mgd] [target]\n" }
sub stop($) { die "$Makefile:@_. Stop.\n" }

sub scan_cmdline() {
   getopts "dgm", \%OPTIONS;
   usage unless @ARGV <= 1;
   $MAKECMDGOALS = $ARGV[0] if @ARGV == 1;
}

sub dump_graph() {
   print STDERR "%MACROS:\n";
   for my $macro (sort keys %MACROS) {
      printf STDERR "%7d [%s] = [%s]\n",
             $MACROS{$macro}{LINE}, $macro, $MACROS{$macro}{VALUE};
   }
   print STDERR "MAKECMDGOALS = [$MAKECMDGOALS]\n";
   print STDERR "%GRAPH:\n";
   for my $target (sort keys %GRAPH) {
      my $prereqs = $GRAPH{$target}{PREREQS};
      printf STDERR "%7d [%s] :", $GRAPH{$target}{LINE}, $target;
      print STDERR " [$_]" for @$prereqs;
      print STDERR "\n";
      for my $cmd (@{$GRAPH{$target}{COMMANDS}}) {
         printf STDERR "%7d.\t[%s]\n", $cmd->{LINE}, $cmd->{CMD};;
      }
   }
}

sub load_Makefile() {
   open my $mkfile, "<$Makefile" or die "$0: $Makefile: $!";
   my $target;
   while (defined (my $line = <$mkfile>)) {
      next if $line =~ m/^\s*(#|$)/;
      if (!$target && $line =~ m/^\s*(\S+)\s*=\s*(.*?)\s*$/) {
         $MACROS{$1} = {LINE=> $., VALUE=> $2};
      }elsif ($line =~ m/^(\S+)\s*:\s*(.*)/) {
         $target = $1;
         $GRAPH{$target}{PREREQS} = [split ' ', $2];
         $GRAPH{$target}{LINE} = $.;
         $MAKECMDGOALS = $target unless $MAKECMDGOALS;
      }elsif ($line =~ m/^\t(.*)/) {
         if (defined $target) {
            push @{$GRAPH{$target}{COMMANDS}},
                 {LINE=> $., CMD=> $1};
         }else {
            stop "$.: Command before first target";
         }
      }else {
         stop "$.: Missing separator";
      }
   }
   close $mkfile;
}

# from https://piazza.com/class/km89clqwsax1uj?cid=264
sub modtime ($) {
   my ($filename) = @_;
   my @stat = stat $filename;
   return @stat ? $stat[9] : undef;
}

sub subst_macros ($) {

}

my %VISITED;
# NEED TO IMPLEMENT
sub make_goal($);
sub make_goal($) {
   my ($goal) = @_;
   # (a) If the goal has already been visited, return.
   #     Otherwise mark it as having been visited and continue.
   if (defined $VISITED{$goal}){
      return;
   } 
   else {
      $VISITED{$goal} = 1;
   }

   # (b) If goal is not a target :
   #    (1)  If goal is a file, return its modtime time.
   #    (2)  Else print a message ‘No rule to make...’ and exit 1.
   # from https://piazza.com/class/km89clqwsax1uj?cid=264

   my $goal_modtime = modtime $goal; 
   
   # from https://piazza.com/class/km89clqwsax1uj?cid=253
   if (!exists($GRAPH{$goal})){
      if(defined $goal_modtime) {
         return $goal_modtime;
      }
      else {
         print "No rule to make target '$goal'. Stop.\n";
         exit(1);
      }
   }

   # (c) If it is a target (even if a file of the same name exists), continue. 
   #   For each prerequisite :
   #   (1)  Call make_goal recursively for the prerequisite.
   #   (2)  Remember the newest prerequisite modtime of all of them.
   #   (3)  If there are no prerequisites, the modtime for them is 0.
   my $newest_mtime = 0;
   my $curr_mtime   = 0;
   my $recompile    = 0;
   if (defined $GRAPH{$goal} || -e $goal){
      foreach(@{$GRAPH{$goal}{PREREQS}}) {
         $curr_mtime = make_goal ($_);
         if(defined $curr_mtime && $curr_mtime >= $newest_mtime) {
            $newest_mtime = $curr_mtime;
         }
         elsif(not defined $curr_mtime) {
            $recompile = 1;
         }
      }
   }

   # (d)  If either of the following is true, run the commands.
   #   (1)  The target file does not exist.
   #   (2)  The newest prerequisite is newer than the target modtime.
   # print "goal   time: $goal_modtime\n";
   # print "recompile  : $recompile\n";
   # print "newest time: $newest_mtime\n";
   if ((defined $goal_modtime && $newest_mtime >= $goal_modtime)
         || not -e $goal) { 
      my $command = $GRAPH{$goal}{'COMMANDS'}[0]{'CMD'};
      my $line    = $GRAPH{$goal}{'COMMANDS'}[0]{'LINE'};
      my $first_char = substr $command, 0, 1;
      if ($first_char ne "@") {
         print "pmake: $command\n";
      }
      my $result = run_command $command;
      if(not defined $result) {
         return;
      }
      elsif($result && ($first_char eq "-")) {
         print "pmake: *** '-' included. results ignored.";
         return;
      }
      else {
         print "pmake: $result\n";
      }
   }

   # (e) If the commands did build the target file, return its modtime.
   #     Else return 0 as the modtime.
   if(-e $goal) {
      return $goal_modtime;
   }
   else {
      return 0;
   }
}

scan_cmdline;
load_Makefile;

dump_hash ("MACROS", %MACROS) if $OPTIONS{'m'};
dump_hash ("GRAPH", %GRAPH) if $OPTIONS{'g'};
dump_graph if $OPTIONS{'d'};

make_goal ($MAKECMDGOALS);

