CSE-112 * Programming Languages * Fall 2020 * Final Exam        1 of 1
$Id: soln-cse112-2020q4-final.txt,v 1.6 2020-12-17 10:08:27-08 - - $

_______________________________________________________
Question 1.  [[3pt]] <PRE>

let rec find list cmp key = match list with
    | [] -> None
    | (k,v)::_ when cmp key k -> Some v
    | _::xs -> find xs cmp key

-1 if not tail recursive on call to find

_______________________________________________________
Question 2.  [[3pt]] <PRE>

(define (find list eq? key)
    (cond ((null? list) #f)
          ((eq? key (caar list)) (cadar list))
          (else (find (cdr list) eq? key))))

-1 for nested ifs rather than instruction to use cond
-1 if not tail recursive on find

_______________________________________________________
Question 3.  [[5pt]] <PRE>

Array extend [
   find: key with: eq [
      1 to: self size do: [:i|
         |tuple|
         tuple := self at: i.
         (key perform: eq with: (tuple at: 1))
            ifTrue: [ ^ tuple at: 2 ].
      ].
      ^ nil.
   ]
].

-1 if used subclass: instead of extend
-1 if did not use perform:with:
other misc points as appropriate

_______________________________________________________
Question 4.  [[7pt]] <PRE>

(a) //// 4 points

while ($line = <>) {
   next unless $line =~ m/(\S+)\s*->\s*(\S+)/;
   my ($key, $val) = ($1, $2);
   push @{$graph{$key}}, $val;
}

// OK if check for extra \s* at beginning and end
// OK not use use my to declare variables

(b) //// 3 points

for $key (sort keys %graph) {
   print "$key ->";
   print " $_" for sort @{$graph{$key}};
   print "\n";
}

// OK if mid-loop uses prefix for instead of suffix for

_______________________________________________________
Question 5.  [[3pt]] <PRE>

(a) //// 1.5 points

let sum = List.fold_left (+.) 0.0
// -0.5 if used other than float op and 0.

(b) //// 1.5 points

(define (sum list)
    (foldl + 0 list))

_______________________________________________________
Question 6.  [[1pt]] <PRE>

Object subclass: Expr [
].

_______________________________________________________
Question 7.  [[4pt]] <PRE>

Expr subclass: NumExpr [
   |value|
   NumExpr class >> new: val [ ^ super new init: val ]
   init: val [ value := val ]
   eval [ ^ value ]
   printOn: stream [ ^ stream << value ]
].

_______________________________________________________
Question 8.  [[6pt]] <PRE>
 
Expr subclass: AddExpr [
   |left right|
   AddExpr class >> new: lf with: rt [ ^ super new init: lf with: rt ]
   init: lf with: rt [ left := lf. right := rt. ]
   eval [ ^ left eval + right eval ]
   printOn: stream [ 
      ^ stream << '(' << left << '+' << right << ')'
   ]
].

_______________________________________________________
Question 9.  [[4pt]] <PRE>

let rec merge less ls1 ls2 = match ls1, ls2 with
    | [], ls2 -> ls2
    | ls1, [] -> ls1
    | x::xs, y::ys -> 
      if less x y then x :: merge less xs ls2
                  else y :: merge less ls1 ys;;

OR:

let rec merge less ls1 ls2 = match ls1, ls2 with
    | [], _ -> ls2
    | _, [] -> ls1
    | x::xs, y::ys when less x y -> x :: merge less xs ls2
    | x::xs, y::ys -> y :: merge less ls1 ys;;

_______________________________________________________
Question 10.  [[4pt]] <PRE>


(define (merge less ls1 ls2)
        (cond ((null? ls1) ls2)
              ((null? ls2) ls1)
              ((less (car ls1) (car ls2))
                    (cons (car ls1) (merge less (cdr ls1) ls2)))
              (else (cons (car ls2) (merge less ls1 (cdr ls2))))))

// -1 if used nested if and not cond as required

_______________________________________________________
Question 11.  [[3pt]] <PRE>

#!/usr/bin/perl
while ($line = <>) {
   $count += $& while $line =~ s/\d+//;
}
print $count, "\n";

// OK if used (\d+) and $1 correctly
// OK if used prefix while instead of postfix while
// OK if missing #! line

_______________________________________________________
Question 12.  [[4pt]] <PRE>

(a) //// 3 points

let rec grep p list = match list with
    | [] -> []
    | x::xs when p x -> x :: grep p xs
    | _::xs -> grep p xs

OK ... if used x::xs -> with an if then else
   ... and no use of the when guard

(b) //// 1 point

let oddpos = grep (fun x -> x > 0 && x mod 2 = 1);;
OR:
let oddpos =
    let f x = x > 0 && x mod 2 = 1
    in grep f

_______________________________________________________
Question 13.  [[3pt]] <PRE>

(define (gcd x y)
    (cond ((> x y) (gcd y (- x y)))
          ((< x y) (gcd x (- y x)))
          (else x)))

-1 if soln not tail recursive.
OK for tests to be done in any order

_______________________________________________________
Question 14.  [[1pt]] <PRE>

cat $* | tr A-Z a-z | tr -c a-z '\n' | sort | uniq | fmt -65

assign 1 pt if answer even vaguely resembles this.  else 0.
TA time limit on grading this question: 5 seconds.

_______________________________________________________
SCORE-TOTAL=50

