$Id: soln-cse112-2020q1-final.txt,v 1.16 2020-03-13 12:53:51-07 - - $
Solution to cse112-2020q1-midterm, page 1

______________________________________________________________________
Question 1.

(a) .bash_profile

(b) export PATH=$PATH:/opt/local/bin

(c) #!/opt/local/bin/nli

(d) chmod +x foo.nli

______________________________________________________________________
Question 2(a). [1]

has(X,[X|_]).
has(X,[_|Y]) :- has(X,Y).

______________________________________________________________________
Question 2(b). [1]

rev([],M,M).
rev([H|T],U,M) :- rev(T,[H|U],M).

______________________________________________________________________
Question 2(c). [1]

len([],0).
len([_|T],N) :- len(T,M), N is M + 1.

______________________________________________________________________
Question 3. [3]

while ($line = <>) {
   ++$lines;
   $chars += length $line;
   @words = $line =~ m/(\S+)/g;
   $words += @words;
}
print "$lines $words $chars\n";

## Alternate way of incrementing $words:
## $words++ while $line =~ s/\S+//;


Solution to cse112-2020q1-midterm, page 2

______________________________________________________________________
Question 4(a). [2]

arrow(a,b).    //// These facts may be in any order.
arrow(b,d).
arrow(b,c).
arrow(d,e).
arrow(e,c).
arrow(c,a).

______________________________________________________________________
Question 4(b). [2]

ispath(A,_,B) :- arrow(A,B).
ispath(A,Visited,B) :-
   arrow(A,X),
   not(member(X,Visited)),
   ispath(X,[X|Visited],B).

______________________________________________________________________
Question 5(a). [2]

let rec find cmp key list = match list with
    | [] -> None
    | (k,v)::xs -> if cmp key k then Some v
                   else find cmp key xs;;

let rec find cmp key list = match list with
    | [] -> None
    | (k,v)::_ when cmp key k -> Some v
    | _::xs -> find cmp key xs;;

//// Note: missing ;; is not an error.

______________________________________________________________________
Question 5(b). [2]

(define (find cmp key list)
    (cond ((null? list) #f)
          ((cmp key (caar list)) (cadar list))
          (else (find cmp key (cdr list)))))

______________________________________________________________________
Question 6. [2]

(define (reverse list)
        (define (rev in out)
                (if (null? in) out
                    (rev (cdr in) (cons (car in) out))))
        (rev list '()))


Solution to cse112-2020q1-midterm, page 3

______________________________________________________________________
Question 7. [1]
1 to: 10000 do: [:i| stdout << i << Character nl].

______________________________________________________________________
Question 8. [3]

Array extend [
   reverse [
      1 to: self size // 2 do: [:i|
         |j t|
         j := self size - i + 1.
         t := self at: i.
         self at: i put: (self at: j).
         self at: j put: t.
      ]
   ]
].

______________________________________________________________________
Question 9. [2]

(define (evalexpr expr)
        (if (number? expr) (+ expr 0.0)
            (apply (car expr)
                   (map evalexpr (cdr expr)))))

______________________________________________________________________
Question 10. [2]

Array extend [                  ///// either answer is OK
   sum [ |sum|
      sum := 0.
      self do: [:n| sum := sum + n].
      ^sum
   ]
].
Array extend [
   sum [ |sum|
      sum := 0.
      1 to: self size do: [:i| sum := sum + (self at: i)].
      ^sum.
   ]
].

______________________________________________________________________
Question 11. [2]

(define (map f list)
        (if (null? list) '()
            (cons (f (car list)) (map f (cdr list)))))


Solution to cse112-2020q1-midterm, page 4

______________________________________________________________________
Question 12. [2]

let fib n = 
    let rec fib' n a b =
        if n = 0 then a
                 else fib' (n - 1) b (a + b)
    in fib' n 0 1;;

______________________________________________________________________
Question 13. [2]

zip( [H1 | T1], [H2 | T2], [pair( H1, H2) | U]) :-
     zip( T1, T2, U).
zip( _, _, []).

______________________________________________________________________
Question 14. [3]

let rec merge less ls1 ls2 = match ls1, ls2 with
    | [], ls2 -> ls2
    | ls1, [] -> ls1
    | x::xs, y::ys -> 
      if less x y then x :: merge less xs ls2
                  else y :: merge less ls1 ys;;

______________________________________________________________________
Question 15. [3]

for $file (@ARGV) {
   @stat = stat $file;
   $size = $stat[7];
   $time = strftime "%b %e %H:%S", localtime $stat[9];
   printf "%6d %s %s\n", $size, $time, $file;
}

